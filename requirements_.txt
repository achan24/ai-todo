### **Final MVP – AI-Driven ADHD Productivity System**  
This version **automates as much as possible** so you don’t have to remember anything except **doing the work**.  

---

## **🔹 MVP Core Features (Final Selection)**  

### **1️⃣ AI-Powered Task Prioritization (Goals + Tags + Automated Sorting)**  
- Users set **high-level goals** (e.g., "Finish MSc Coursework," "Improve Fitness").  
- **Tasks are automatically sorted by AI** based on **urgency, importance, and deadlines**.  
- **Manual tagging** allows finer control, but AI **learns from past decisions** to improve over time.  
- **One-Click “What Should I Do Next?” Button** → AI recommends the highest-priority task.  

🔹 **Why?** → Removes **decision paralysis**, so you focus on **execution**.  

---

### **2️⃣ AI-Powered Automatic Reminders (No More Forgetting!)**  
- **Context-Aware Smart Reminders** pop up **at the right moment** (e.g., “Start studying before your 3PM class”).  
- **AI detects if you haven’t engaged with a task & sends nudges** (e.g., “You haven’t worked on this project in 3 days, should we schedule time?”).  
- **Auto-snooze** if ignored, then reminds again later.  

🔹 **Why?** → **Reduces mental load** by handling reminders **for you**.  

---

### **3️⃣ Daily Activity Tracker + Reflection & Preview**  
- **Timeline view** to see what’s been done & what’s coming.  
- **Color-coded heatmap** for **progress trends**.  
- **End-of-day “Reflection & Preview” mode** → Review completed tasks, set up for tomorrow.  

🔹 **Why?** → ADHD brains **need to see progress visually** to stay motivated.  

---

### **4️⃣ Voice Journaling + AI Summaries (Fast Thought Dumping)**  
- **Record quick reflections via voice**.  
- **AI auto-summarizes into structured notes**.  
- **Auto-tags based on keywords** (e.g., “stress” → connects to mood tracking).  

🔹 **Why?** → Thinking **is faster than typing**, so this speeds up self-reflection.  

---

### **5️⃣ Future-Self Messages + Emotional Consequence Awareness (Scheduled Self-Check-Ins)**  
✅ **Automatic Scheduled Time for Emotional Consequence Awareness**  
- **Daily/Weekly “Emotional Check-In” Sessions** to assess how current choices impact future goals.  
- AI suggests **journaling prompts** like:  
  - *“How will Future You feel if this isn’t done?”*  
  - *“What would you tell your past self about today?”*  

✅ **Future-Self Message System**  
- Users **write messages for their future selves** at key moments.  
- App **sends them back at the right time** (e.g., “Hey, you said this was important—stick with it!”).  

🔹 **Why?** → **Building emotional awareness helps prevent procrastination & bad decisions**.  

---

### **6️⃣ Nested Task System (Workflowly-Style for Breaking Things Down)**  
- **Tasks & subtasks auto-expand/collapse** for clarity.  
- **Quick keyboard-based entry** for minimal friction.  
- **AI suggests logical subtasks** based on past behavior.  

🔹 **Why?** → **Big tasks are overwhelming**—this **breaks them into easy steps**.  

---

### **7️⃣ AI Overview of All Tasks & Goals → “What Should I Do Next?”**  
- AI **analyzes all tasks, goals, and deadlines** to determine the **most urgent & impactful**.  
- **Prioritized task list** adjusts dynamically based on progress.  
- Users can **override AI suggestions**, and it **learns from that behavior**.  

🔹 **Why?** → **You never have to guess what to do next**—AI **figures it out** for you.  

---

### **8️⃣ Humor & Dopamine Boosts (Daily Encouragement)**  
- **AI generates funny, personalized motivation messages**.  
- **Mini dopamine rewards** for completing tasks (memes, emojis, sounds).  
- **Silly Mode** (optional) for UI tweaks like ridiculous encouragements.  

🔹 **Why?** → **ADHD brains crave novelty & fun**—this keeps motivation high.  

---

## **🔹 Goal Targets System (Natural Language Success Markers)**

### **Overview**
- **Goal Targets** provide ADHD-friendly, natural language markers for goal success
- Users can describe what success looks like in their own words
- Each target has a deadline to track temporal progress
- Targets avoid rigid mathematical metrics while still providing clear success criteria
- AI analyzes target descriptions to prioritize goals and recommend tasks

### **Database Schema Updates Needed**
1. Add `goal_targets` table:
   - `id`: UUID primary key
   - `title`: Clear identifier
   - `description`: Free-form text description
   - `deadline`: When target should be achieved
   - `status`: Enum ('concept', 'active', 'paused', 'achieved')
   - `notes`: Array of text entries for periodic reflections
   - `goal_id`: Foreign key to goals table

### **ADHD-Friendly Features**
1. **Natural Language Processing**:
   - Users describe targets in their own words
   - AI extracts meaning, importance, and urgency
   - No need to quantify or formulate mathematically

2. **Time Blindness Accommodation**:
   - Built-in deadline buffer suggestions
   - Visual timeline of approaching target deadlines
   - Automatic reminders scaled to urgency

3. **Reduced Decision Fatigue**:
   - Suggested target prompts (e.g., "I'll know I succeeded when...")
   - Template targets based on goal category
   - Simple status tracking without complex metrics

### **Integration with AI Recommendation System**
- AI analyzes target descriptions, deadlines, and status
- Combines with goal priority to recommend focused tasks
- Predicts which targets need attention based on patterns
- Creates personalized "What should I do now?" recommendations
- Provides natural language explanation of recommendations

### **Example Goal and Targets**
```
Goal: "Improve Public Speaking"
  Target 1: "Feel comfortable during department presentations" (April 1)
  Target 2: "Get positive feedback on my delivery style" (May 15)
  Target 3: "Successfully pitch project to leadership team" (June 30)
```

### **Next Implementation Steps**
1. Create migration for new `goal_targets` table
2. Add CRUD endpoints under `/goals/{id}/targets`
3. Build NLP analysis service for target descriptions
4. Create UI components with natural language prompts
5. Enhance AI recommendation to incorporate target data

---

## **🔹 Final MVP Feature List**  
1️⃣ **AI Task Prioritization (Goals + Tags + AI Sorting)**  
2️⃣ **AI-Powered Automatic Reminders**  
3️⃣ **Activity Tracker + Reflection & Preview**  
4️⃣ **Voice Journaling + AI Summaries**  
5️⃣ **Future-Self Messages + Scheduled Emotional Awareness Check-Ins**  
6️⃣ **Nested Task System (Workflowly-Style Task Breakdown)**  
7️⃣ **AI Overview of Tasks & Goals (“What Should I Do Next?” Button)**  
8️⃣ **Daily Humor & Dopamine Boosts**  

---

### **💡 Next Steps**  
🚀 **This should be extremely functional & lightweight—any final changes before locking in development?**



Infrastructure & Deployment (Render + SambaNova Cloud)  

| **Component**          | **Service**                      | **Why?** |
|----------------------|--------------------------------|---------|
| **Frontend Web App** | Next.js (React)               | Fast, SSR for performance |
| **Styling**          | Tailwind CSS                  | Lightweight, responsive |
| **Backend API**      | FastAPI (Python)              | Minimal, async API, easy AI integration |
| **Database**         | PostgreSQL (Render Managed)   | SQL-based, easy to manage |
| **AI Processing**    | SambaNova Cloud API           | Offloads AI workload, removes need for GPUs |
| **Task Scheduling**  | Render Cron Jobs             | Handles reminders & automation |
| **Background Jobs**  | Render Workers (Celery)      | Runs AI requests, reminders |
| **Push Notifications** | Email (SMTP) OR OneSignal (optional) | Keeps it simple |
| **Offline Support**  | LocalStorage (Browser-Side)  | Keeps tasks available offline |
| **Hosting & Deployment** | Render (Static Site for frontend, Web Service for backend) | Fully managed, auto-deploy |


Tech Stack Summary
| **Component**       | **Tech Choice** |
|-------------------|---------------|
| **Frontend**      | Next.js (React) |
| **Styling**       | Tailwind CSS |
| **Backend API**   | FastAPI (Python) |
| **Database**      | PostgreSQL (Render Managed) |
| **Task Scheduling** | Render Cron Jobs |
| **AI Processing**   | SambaNova Cloud API |
| **Background Jobs** | Celery (Python) |
| **Push Notifications** | Email (SMTP) OR OneSignal |
| **Offline Support** | LocalStorage (Browser-Side) |






1. Core Prioritization Algorithm

The AI uses a hybrid scoring system combining:

a. Rule-Based Factors (30% weight)

python

def rule_score(task):
    # Time sensitivity
    deadline_urgency = 1 / (task.deadline - now()).days
    
    # Goal alignment
    goal_weight = task.goal.weight  # User-assigned 1-5
    
    # Completion momentum
    recent_completion_rate = user.stats.avg_completions_last_week
    
    return (deadline_urgency * 0.4) + (goal_weight * 0.3) + (recent_completion_rate * 0.3)
b. AI-Predicted Factors (70% weight)
The LLM (Llama3) analyzes:

python

[
    {"role": "system", "content": """
        You're a productivity coach specializing in ADHD. Given these tasks and goals:
        - Tasks: {tasks}
        - Goals: {goals}
        - Recent activity: {recent_5_tasks}
        - Time/energy: {current_time: 3PM, last_meal: 1hr ago}
        
        Score each task 1-10 on:
        1. Likely completion success
        2. Emotional payoff if done
        3. Blockage risk
        """},
    {"role": "user", "content": "Prioritize for maximum impact"}
]
2. Selection Process

mermaid
Copy
graph TD
    A[All Tasks] --> B{Filter}
    B --> C[Active/Uncompleted]
    C --> D[Rule-Based Scoring]
    C --> E[AI Prediction]
    D --> F[Combine Scores]
    E --> F
    F --> G[Top 3 Candidates]
    G --> H{Energy Check}
    H -->|Low Energy| I[Pick Shortest Task]
    H -->|High Energy| J[Pick Highest Impact]
3. Real Example

Tasks:

Write essay (2hrs, deadline: tomorrow)
Call dentist (15min, no deadline)
Research project (4hrs, deadline: next week)
AI Analysis:

python
Copy
# Rule-Based Scores
task1 = 0.7 (urgent deadline)
task2 = 0.3 (no deadline)
task3 = 0.2 (distant deadline)

# AI Predictions
task1 = 6/10 (high blockage risk: needs focus)
task2 = 8/10 (easy win)
task3 = 3/10 (low energy time)

# Combined Scores
task1: (0.7*0.3) + (6*0.7) = 4.41
task2: (0.3*0.3) + (8*0.7) = 5.69  # Winner
task3: (0.2*0.3) + (3*0.7) = 2.16
Selection Logic:
"At 3PM with moderate energy, suggest quick win (call dentist) to build momentum."

4. Key Differentiators

Energy Awareness

Copy
if user.last_interaction_type == "procrastination":
    recommend_low_energy_tasks()
elif user.morning_routine_completed:
    recommend_deep_work()
Anti-Perfectionism
Actively avoids suggesting tasks with:
3 subtasks
Historical reschedule count >2
"Perfect" or "Flawless" in task title


Momentum Detection
python

if len(recently_completed_tasks) >= 2:
    current_score *= 1.2  # Strike while hot
5. Implementation Code

python
def get_next_task(user):
    # 1. Get candidate tasks
    candidates = Task.filter(
        user=user, 
        completed=False,
        blocked=False
    ).limit(20)
    
    # 2. Hybrid scoring
    scored = []
    for task in candidates:
        rule = rule_score(task)
        ai = ai_score(task) / 10  # Normalize 1-10 to 0-1
        combined = (rule * 0.3) + (ai * 0.7)
        scored.append((task, combined))
    
    # 3. Energy adjustment
    energy = get_current_energy_level(user)
    if energy < 0.4:
        scored.sort(key=lambda x: x[0].estimated_duration)
    else:
        scored.sort(key=lambda x: -x[1])
    
    # 4. Return top 1
    return scored[0][0]
6. Why This Works for ADHD

Forces Concrete Comparisons
The AI can not just say "do important stuff" - it must choose between specific options.
Avoids Priority Inflation
Each task is scored relative to others, not absolutely. "Most important" ≠ "Important".
Prevents "Should Do" Bias
The AI gets penalized if it keeps suggesting tasks the user avoids.
7. Debugging Tips

To see why the AI chose a task:

bash
Copy
curl -X POST http://localhost:8000/debug_priority -d '{"task_id": 123}'

# Response
{
    "decision_reason": "Chose 'Call dentist' because: 
    - Quick win (15min)
    - You have 30min before next meeting
    - Last 2 completed tasks were short",
    "alternative_options": [
        {"task": "Write essay", "rejection_reason": "Needs 1hr+ focus time"},
        {"task": "Research", "rejection_reason": "Low afternoon energy match"}
    ]
}
This is the actual decision logic - no black boxes!


Homepage is my goals.
- Then when I click into a goal
- Then I see my todos, milestones, metrics, and progress
    - I can add todos in the goal page
    - I can add milestones
    - I can set target metrics 
    - I can set process metrics
    - I can connect todos with multiple target metrics, process metrics or milestones
- Each goal has its own dashboard or page
    - Containing
        - The name of the goal
        - Why this goal is important to you
        - The target metrics
        - The process metrics
        - The todos
        - The milestones
        - The deadline
        - The current progress
- Each goal can have subgoals
    - That is be connected to other goals
- The goal page has
    - Metrics
    - Create a card underneath metrics with 3 columns
        - Left column is negative experiences
        - Middle column is strategies
        - Right column is positive experiences
    - When I add an experience it goes on the top - with a timestamp
    - Same with strategies 
        - Strategy is a series of steps
    - Example experience
        - "Had a bad experience with the last of the beef mince, don't eat again"
        - Include a timestamp
    - Example Strategy
        - Series of steps to accomplish something.
    - Allow user to edit strategy
    - Allow user to switch between different strategies
    - Allow user to select the current strategy
- Use the current strategy as a template for a todo list
    - The list will be created with the strategy name as the parent task
        - Steps will be subtasks for the parent
- Process view mode
    - This mode is only for a parent task
    - It will start a new dialog with the process view
    - This dialog will be a list of subtasks with the time it took to complete the task
        - or the estimated time (if there is one)
        - or a countup - to find the time 
    - User will be able to take notes for a particular task

- Filter tasks on goal page
    - Sort by Date Created, ascending or descending
    - Filter by priority
    - Show completed tasks


- Goal homepage - emoji-based progress badges
    - emoji-based progress badges stacked above each goal. The badges indicate activity status and engagement level:
        🔥 Hot Streak (Red/Orange): A fire icon appears if a goal has had 3+ updates in a week, showing strong engagement.
            - Hot streak is 3 consecutive daily tasks completed   
        ⏳ Procrastinator (Gray/Blue): A sand timer or snail icon appears if no activity has been logged for a certain period, warning of stagnation.
            - 2 days with no tasks being achieved
        🎯 Milestone Hit (Gold): A target or medal appears when a user completes a major step toward their goal, celebrating progress.
            - I have not implemented milestones yet - so wait for this one
        🧊 Frozen Goal (Blue/White): An ice cube or snowflake appears for long-term inactivity, indicating a stalled goal.
            - No tasks done for 7 days
        🚀 Momentum	Making steady progress without breaks	Rocket	
            - Completing a parent task 
        🎖 Goal Completed	Fully achieved the goal	Trophy / Checkmark 
            - All tasks completed
    - The badges are stackable, meaning a goal can display multiple at once. Goals are color-coded based on activity: brighter for active, faded for stagnant, glowing for achievements.

- AI button for tasks -Breaking down a task into subtasks AI features
    - Connect to Samabnova Cloud API
    - Send a prompt to breakdown task into subtasks
    - Show the user the subtasks and allow them to select and or edit them before accepting list


         
Configuration Management
-----------------------
- Use environment-based configuration
    - Development environment (.env.development)
        - Local API URL
        - Debug settings
    - Production environment (.env.production)
        - Production API URL
        - Production-specific settings
- Centralize configuration
    - One source of truth for all config values
    - No hardcoded values in components
    - Easy to modify for different deployments
- Use TypeScript interfaces for config
    - Type-safe access to config values
    - IDE autocompletion support
    - Prevents typos and mistakes

Updated Specification

1. Overview

This app helps users achieve goals by defining milestones (steps toward a goal) and tracking progress using target metrics (success conditions) and process metrics (effort tracking). Users can create todos that contribute to a milestone, a specific metric, or both. AI insights optimize workflow by suggesting the most effective actions.

2. Core Features

2.1 Goal Management
Users can create, edit, and delete goals.
Each goal has a title, description (why it matters), optional deadline.
Goals can be active, paused, completed, or abandoned.
Users can define milestones as intermediate steps to completing a goal.

2.2 Milestones (Steps Toward a Goal)
Users can create milestones within a goal.
Each milestone includes:
Title (e.g., "Launch MVP")
Description (e.g., "Website live with basic features")
Linked Target Metrics (if applicable)
Progress Tracking (linked todos)
Status (Not Started, In Progress, Completed)
Milestones act as checkpoints toward achieving the goal.
Users can link todos to a milestone, a target metric, a process metric, or a combination.

2.3 Todos System (Tasks Linked to Metrics & Milestones)
Users can create todos (tasks) under a goal and link them to:
A Milestone (e.g., "Write landing page content" for "Launch MVP")
A Target Metric (e.g., "Sell 10 subscriptions")
A Process Metric (e.g., "Spend 5 hours coding")
Multiple categories (e.g., "Complete website backend" contributes to both milestone completion and process metrics).
Each todo includes:
Description (e.g., "Write 1 blog post")
Estimated Time (optional, e.g., "30 minutes")
Linked Metric(s) / Milestone
Completion Status (Pending, In Progress, Done)
Impact Score (Low, Medium, High)

2.4 Target Metrics (Success Criteria)
Defines what it means to complete a goal.
Each goal can have multiple success conditions.
Users succeed if any target metric is met.
Metric types:
Numeric (e.g., “Earn €5,000”)
Boolean (e.g., “Launch a website”)
Percentage (e.g., “Achieve 90% test accuracy”)
Visual progress bars track completion.

2.5 Process Metrics (Effort Tracking)
Measures the effort and time invested toward a goal.
Includes:
Time Spent (tracked automatically or manually logged).
Actions Taken (e.g., workouts completed, articles written).
Streak Tracking (consecutive days worked on goal).
Efficiency Score = (Results Achieved) / (Time Spent).
Heatmaps and trend-based graphs show consistency.

2.6 Goal Dashboard (UI)
Goal title & motivation displayed at the top.
Target metrics section with progress bars.
Process metrics section tracking time and effort.
Milestones section showing steps toward the goal.
Todos section showing linked milestones and metrics.
Visual progress charts (graphs, heatmaps).
AI-generated insights & recommendations to improve efficiency.

2.7 AI-Powered Insights (Optional)
AI analyzes efficiency and impact trends.
AI suggests the best next todos based on historical performance.
AI detects inefficiencies, e.g., "You spent 10 hours on this but made little progress—try a different approach?"
Motivational nudges based on user habits.


3. Implementation Plan

Phase 1: Core Features
 Goal Management (CRUD operations).
 Milestone System (Create, edit, delete milestones).
 Todos System (Create, edit, delete todos, link to metrics/milestones).
 Target Metrics System (Multi-criteria tracking).
 Process Metrics System (Time tracking, streaks).
 Task Logging System (Impact-based sorting).
 Basic Analytics & Visual Progress Dashboard.
Phase 2: Advanced Features
 AI-based todo recommendations.
 AI-powered efficiency analysis.
 Habit & streak tracking.
 Weekly reflection insights.


5. Success Metrics

Goal completion rate: % of goals where at least one target metric is met.
Milestone completion rate: % of milestones completed per goal.
Task completion rate: % of todos linked to milestones/metrics successfully completed.
Efficiency score improvements: % increase in results per time spent.






Situational Growth & Analysis System - Full Feature Report

This document consolidates all core requirements, features, and specifications from the discussion, ensuring a structured framework for developing the Situational Growth & Analysis System.

🔹 Core Concept: Situations

A Situation represents an experience that is either:

Planned (Pre-Action) – Structuring an upcoming situation.
Completed (Post-Action) – Reflecting on a past situation.
Comparative (Growth Analysis) – Comparing multiple situations over time.
Key Capabilities
✅ Write a structured situation report (before or after an event).
✅ Break a situation into phases for deeper analysis.
✅ Compare similar situations to track improvement.
✅ Visualize progress using a timeline with cards & comparison dots.
✅ Analyze trends & AI-driven insights to optimize future performance.

🔹 Situation Structure

Each situation follows a standardized format for easy logging, retrieval, and comparison.

1️⃣ Core Situation Data
Field	Description
Title	Short name for the situation.
Date & Time	Start & end timestamps (if post-action).
Type	Planned (pre-action) or Completed (post-action).
Description	Overview of what happened or is expected to happen.
Self-Rating	Performance score (1-10).
Outcome	Success, Partial Success, or Failure.
Key Lessons Learned	What worked, what didn’t, and future improvements.
2️⃣ Phases (Breaking Down a Situation)
Each situation is divided into phases, allowing for granular evaluation & comparison.

Field	Description
Phase Name	Identifies a key moment (e.g., "Opening," "Execution," "Reflection").
Approach Used	The method or strategy applied in this phase.
Effectiveness Score	Rated 1-10, based on how well this phase went.
Response / Outcome	What happened as a result of this phase?
Notes & Observations	Insights into what worked or failed.
Example: Social Situation Breakdown
Phase	Approach Used	Score	Outcome
Opening	Asked about the event.	5/10	Felt awkward, neutral response.
Small Talk	Discussed hobbies.	6/10	They engaged, but I had to carry the convo.
Group Engagement	Joined an existing convo.	8/10	Felt natural, better flow.
Phases allow you to compare the same stage across different situations.

3️⃣ Comparison Report (Tracking Growth)
A Comparison Report is automatically generated between two or more situations, highlighting trends, improvements, and recurring weak spots.

Metric	Situation A	Situation B	Change
Opening Score	5/10 (Awkward)	7/10 (Smooth)	+2
Engagement Strategy	Joined convo	Started convo	More proactive
Overall Confidence	5/10	8/10	+3
AI Insights:
💡 "You improved in making introductions, but engagement still fluctuates. Try leading with a personal observation instead of a question."

🔹 Visual Timeline & Growth Tracking

1️⃣ Timeline Structure
Big Cards → Each situation is displayed as a large card, summarizing:
Title, Date, Key Metrics, & Takeaways.
Clicking expands full details.
Comparison Dots → Small connectors between situations, summarizing:
Improvement trends, AI insights, and key differences.
Lines Connect Situations → Show progression over time.
2️⃣ Example: Timeline with Cards & Dots
🔳 [Networking Event - Feb 1]  
   - Confidence: 5/10  
   - Best Phase: Small Talk  
   - Weakest Phase: Opening  
   - Key Takeaway: "Joining convos worked better than initiating alone."

🔘 [Comparison: Feb 1 → Feb 10]  
   - Improvement: Confidence **+2**  
   - Weakness: Still struggles with openings  
   - AI Insight: "Try starting with a direct observation instead of a question."

🔳 [Dinner Party - Feb 10]  
   - Confidence: 7/10  
   - Best Phase: Group Engagement  
   - Weakest Phase: Opening  
   - Key Takeaway: "Asking for opinions sparked better discussions."
🔹 AI-Driven Insights & Automation

1️⃣ AI Capabilities
Auto-Summarize Situations → Extract key points & trends.
Compare Situations → Identify growth trends across experiences.
Suggest Strategy Improvements → Recommend better approaches.
Predict Future Performance → Highlight weaknesses to improve.
2️⃣ AI Prompt for Generating Situations
*"Create a structured situation entry that serves either as a pre-action plan or a post-action report.

Planned Situation (Pre-Action Mode):
Define the situation, its purpose, and expected phases.
Outline the intended approach, strategies, and key success criteria.
Identify potential challenges and how they will be handled.
Set measurable targets for evaluating performance.
Completed Situation (Post-Action Mode):
Capture what actually happened, including deviations from the plan.
Break the experience into phases, if applicable, noting effectiveness and insights.
Score key aspects (1-10) based on personal assessment.
Compare to similar past situations to track improvement.
Extract key lessons and strategies for future refinement.
If applicable, generate a comparison report between a past and present situation, highlighting patterns, improvements, and areas to adjust for future scenarios."*

🔹 Database Schema (Storage & Structure)

To enable logging, retrieval, and AI analysis, the system requires structured database tables.

1️⃣ Situations Table
Field	Type	Description
id	UUID	Unique identifier.
user_id	Foreign Key	Links to users table.
title	String	Short name of the situation.
description	Text	Summary of situation.
situation_type	Enum	Planned or Completed.
start_time	Timestamp	Time it started.
end_time	Timestamp	Time it ended.
outcome	Enum	Success, Partial Success, or Failure.
score	Integer	Self-assessed score (1-10).
2️⃣ Phases Table
Field	Type	Description
id	UUID	Unique identifier.
situation_id	Foreign Key	Links to a situation.
phase_name	String	Example: "Opening Phase."
approach_used	Text	Strategy applied.
effectiveness_score	Integer	Performance (1-10).
response_outcome	Text	What happened as a result.



New features
- I want to be able to create a new situation entry using the phases of the previous situation
- I also want the ability to add phases in between existing phases

- We can also organise by skill component - eg a phase 
    - A phase is a skill component that can only be done in unit time
    - There maybe multiple skill components in a single phase
        - Eg. good body language
            - Eye contact
            - Posture
            - Gestures
            - Facial expression
            - Voice tone
        - Eg. good communication skills
            - Leading the conversation
            - Being receptive
            - Active listening
            - Goal directed
            - Fun and light


AI Productivity Assistant
------------------------

### Overview
The AI Productivity Assistant is an intelligent system that analyzes user data across the application to provide actionable recommendations and insights when explicitly triggered by the user. It serves as a personal productivity advisor that understands the entire context of your goals, tasks, targets, and experiences without requiring you to specify what to analyze.

### Core Functionality

1. **On-Demand Analysis System**
   - The assistant analyzes all user data when explicitly triggered via a button press
   - Analyzes the relationships between goals, tasks, targets, strategies, notes, situations, and experiences
   - Generates prioritized, actionable recommendations based on comprehensive analysis
   - Presents "What to focus on next" recommendations when requested

2. **Holistic Data Analysis**
   - Complete visibility into all user data when triggered:
     - Goals and their hierarchical relationships
     - Tasks and their completion status
     - Targets and progress metrics
     - Strategies and their historical effectiveness
     - Notes and contextual information
     - Situations and experiences for pattern recognition
   - Identifies connections and dependencies that might not be obvious to the user

3. **Intelligent Recommendation Types**
   - Priority focus areas: "Focus on Goal X today based on upcoming deadlines"
   - Task prioritization: "These 3 tasks will have the highest impact on your progress"
   - Goal progress insights: "Goal Y is stalling and needs attention"
   - Missing definition alerts: "Goal Z would benefit from specific targets"
   - Strategy optimization: "Strategy A has been more effective than Strategy B for similar goals"
   - Time management advice: "Your productivity patterns suggest morning work on creative tasks"

4. **Interactive Recommendation Interface**
   - Recommendations displayed after user triggers the analysis
   - Each recommendation includes reasoning and supporting evidence
   - One-click actions to implement recommendations (e.g., prioritize a task, view a goal)
   - Ability to provide feedback on recommendations to improve future suggestions

5. **Efficient Learning System**
   - Learns from user behavior and feedback without requiring configuration
   - Improves recommendation quality over time based on which suggestions were implemented
   - Adapts to changing priorities and patterns in user data
   - Maintains memory of past recommendations and their outcomes
   - Optimizes prompt usage by only analyzing when explicitly requested

6. **Implementation Requirements**

   **Backend:**
   - Data aggregation service that collects information across all models when triggered
   - Analysis engine to identify patterns, priorities, and recommendations
   - Integration with external AI service (e.g., SambaNova) for advanced pattern recognition
   - Memory system to track recommendation effectiveness
   - Efficient prompt management to minimize API usage

   **Frontend:**
   - Clear "Analyze" button on the front page to trigger the assistant
   - Recommendation display area that shows results after analysis
   - Visual priority indicators for recommendations
   - Action buttons to implement suggestions with minimal clicks
   - Feedback mechanism for recommendations

7. **User Experience**
   - Zero configuration required - the system learns from existing data and interactions
   - Recommendations appear when explicitly requested by the user
   - Clear explanations for why each recommendation is being made
   - Actionable suggestions that can be implemented immediately
   - Efficient use of AI resources by only analyzing when requested

## 🔹 Enhanced Goal Recommendation System

### Overview
- The goal recommendation system should provide intelligent, contextual recommendations that guide users toward achievement
- Recommendations should consider multiple factors beyond simple priority and deadlines
- The system should leverage LLM capabilities to identify patterns and scenarios that might not be anticipated
- Recommendations should be actionable and provide clear next steps

### Key Recommendation Scenarios
1. **Goal Inactivity Detection**:
   - "This goal hasn't been touched in a while and aligns with your priorities"
   - Suggest creating new targets or tasks to revitalize progress

2. **Deadline-Driven Recommendations**:
   - "This high priority goal has a deadline approaching and needs immediate focus"
   - Provide specific next actions based on remaining work

3. **Workload Analysis**:
   - "This target requires significant work based on complexity and timeline"
   - Break down complex targets into manageable tasks

4. **Progress Acceleration**:
   - "You're making good progress on this goal, here's how to maintain momentum"
   - Suggest next steps based on current trajectory

5. **Stalled Progress Intervention**:
   - "Progress on this goal has stalled, here's how to get back on track"
   - Identify blockers and suggest solutions

### Implementation Approach
1. **Comprehensive Data Collection**:
   - Provide the LLM with rich context about goals, targets, tasks, and progress
   - Include temporal data (creation dates, last updates, deadlines)
   - Track completion rates and progress metrics

2. **Open-Ended Prompt Design**:
   - Create prompts that encourage the LLM to identify relevant patterns
   - Allow the LLM to consider scenarios beyond predefined categories
   - Request detailed reasoning for recommendations

3. **Actionable Output Format**:
   - Ensure recommendations include specific next steps
   - Categorize recommendations by type (task creation, target focus, etc.)
   - Provide confidence scores and importance/urgency ratings

4. **User Feedback Loop**:
   - Capture user responses to recommendations
   - Use feedback to improve future recommendations
   - Allow users to specify focus areas or override recommendations

### Integration Points
- Enhance the existing `get_openrouter_goal_recommendation` and `get_sambanova_goal_recommendation` functions
- Update the prompt to be more comprehensive and outcome-focused
- Ensure the recommendation schema captures all necessary details
- Connect with the Goal Targets system for target-specific recommendations
