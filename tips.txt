SQLite Migration Tips
====================

1. SQLite Limitations
-------------------
- SQLite DOES NOT support ALTER TABLE for:
  * Adding constraints (like NOT NULL)
  * Changing column types
  * Renaming columns
  * Dropping columns

2. Correct Migration Pattern for SQLite
------------------------------------
When needing to modify tables, ALWAYS use this pattern:
1. Drop temporary tables if they exist from previous failed migrations
2. Create new table with desired schema
3. Copy data from old table to new table (use COALESCE for NULL values)
4. Drop old table
5. Rename new table to original name

Example:
```python
# Clean up any failed migrations
op.execute('DROP TABLE IF EXISTS table_new')

# Create new table
op.create_table(
    'table_new',
    sa.Column('id', sa.Integer(), nullable=False),
    # ... other columns
)

# Copy data with NULL handling
op.execute('''
    INSERT INTO table_new 
    SELECT 
        id,
        COALESCE(nullable_field, default_value),
        other_field 
    FROM table
''')

# Drop old table
op.drop_table('table')

# Rename new table
op.rename_table('table_new', 'table')
```

3. DateTime Fields in SQLite
-------------------------
- Always use server_default for created_at and updated_at
- Correct format:
  ```python
  created_at = Column(DateTime(timezone=True), 
                     server_default=sa.text('CURRENT_TIMESTAMP'),
                     nullable=False)
  updated_at = Column(DateTime(timezone=True),
                     server_default=sa.text('CURRENT_TIMESTAMP'),
                     onupdate=sa.text('CURRENT_TIMESTAMP'),
                     nullable=False)
  ```

4. Foreign Keys
-------------
- Always specify ondelete behavior
- Example:
  ```python
  parent_id = Column(Integer, ForeignKey('parent.id', ondelete='CASCADE'))
  ```

5. Common Gotchas
---------------
- Always handle nullable fields explicitly with COALESCE in migrations
- Use Text type for long string fields
- Remember to create indexes where needed
- SQLite treats booleans as integers
- When adding NOT NULL constraints, provide default values for existing NULL data
- Always clean up temporary tables from failed migrations with DROP TABLE IF EXISTS

6. Model Creation
----------------
ALWAYS CHECK EXISTING MODELS BEFORE CREATING NEW ONES:
- The Metric model already exists in models/goal.py
- Don't create duplicate models in separate files
- Look through existing code thoroughly before making changes

7. Model Organization
-------------------
- Models should be defined in a single location to avoid duplicate table definitions in SQLAlchemy
- If a model is closely related to another (like Metric is to Goal), define it in the same file
- Import models through __init__.py to maintain clean imports (e.g., from ..models import Metric instead of from ..models.metric import Metric)

8. Component Naming Consistency
----------------------
- NEVER have multiple components that do the same thing with different names (e.g. EditTaskModal vs EditTaskDialog)
- Pick ONE clear, descriptive name and stick with it throughout the app
- Bad: Having EditTaskModal.tsx and EditTaskDialog.tsx doing the same thing
- Good: Pick EditTaskDialog.tsx and use it everywhere - the name describes what it does, not how it looks
- This makes the codebase more intuitive and prevents confusion when adding new features

9. Don't fucking rename anything unless specifically asked to and permission is given.

10. Metric model is in Goal model.

11. Alembic Migration Tips
----------------------
- When a migration fails, check for leftover temporary tables (e.g. tasks_new) from previous attempts and clean them up
- For SQLite migrations that modify tables:
  1. Create a new table with the desired schema
  2. Copy all data from old table to new, being explicit about column order
  3. Drop the old table
  4. Rename the new table to the original name
- Index names must be unique across the entire database
- Always handle both upgrade() and downgrade() paths in migrations
- Test migrations on a copy of the database first
- When copying data between tables, explicitly list all columns to avoid issues with schema changes